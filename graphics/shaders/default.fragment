uniform mat4 matrixModel;
uniform mat4 matrixPV;

uniform vec4 fill;
uniform vec4 stroke;
uniform vec4 tint;

uniform int useLight;
uniform int useColor;
uniform int useTexture;

uniform sampler2D tex0;

uniform vec3 cameraPosition;

vec3 lightPosition = vec3(0., 100., 0.);

in vec3 vPosition;
in vec3 vNormal;
in vec4 vColor;
in vec2 vTexCoords;

struct light {
    vec3 surfaceToLight;
    float attenuation;
};

// point light
light pointLight(vec3 ambientLight, float attenuationLight, vec3 surfacePos) {
    light l;
    l.surfaceToLight = normalize(ambientLight.xyz - surfacePos);
    
    float distanceToLight = length(ambientLight.xyz - surfacePos);
    l.attenuation = 1.0 / (1.0 + attenuationLight * pow(distanceToLight, 2));
    
    return l;
}

// directional light
light directionalLight(vec3 ambientLight, float attenuationLight, vec3 surfacePos) {
    light l;
    
    l.surfaceToLight = normalize(ambientLight.xyz);
    l.attenuation = 1.0; //no attenuation for directional lights
    
    return l;
}

void main() {
    if (useLight > 0) {
        vec4 finalColor = vColor;
        
        vec3 normal = normalize(transpose(inverse(mat3(matrixModel))) * vNormal);
        
        vec3 surfacePos = vPosition;
        vec4 surfaceColor = vColor;
        
        vec3 surfaceToCamera = normalize(cameraPosition - surfacePos);
        vec3 surfaceToLight = normalize(lightPosition - surfacePos);
        
        light l = directionalLight(lightPosition, 1., surfacePos);
        
        // diffuse
        float diffuseCoefficient = max(0.0, dot(normal, l.surfaceToLight));
        
        gl_FragColor = finalColor * diffuseCoefficient;

        
//        gl_FragColor = finalColor * pow(max(0.0, dot(surfaceToCamera, normal)), 80);
        
//        gl_FragColor = vec4(1, 1, 1, 1) * dot(surfaceToCamera, normal);
        
    } else {    
        if (useTexture == 1)
            gl_FragColor = texture2D(tex0, vTexCoords) * tint;
        else if (useColor == 1)
            gl_FragColor = vColor;
        else
            gl_FragColor = fill;
    }
}
