uniform mat4 matrixModel;
uniform mat4 matrixPV;

uniform vec4 fill;
uniform vec4 stroke;
uniform vec4 tint;

uniform int useLight;
uniform int useColor;
uniform int useTexture;

uniform sampler2D tex0;

uniform vec3 cameraPosition;

struct light {
    int on;
    
    int type;
    
    vec3 position;
    vec3 direction;
    
    vec4 color;
    
    float ambientStrength;
    float diffuseStrength;
    float specularStrength;
    
    vec3 surfaceToLight;
    
    float attenuation;
    float coefficient;
};

uniform int nLights;
uniform light lights[10];

in vec3 vPosition;
in vec3 vNormal;
in vec4 vColor;
in vec2 vTexCoords;

vec3 ambientLight(light l) {
    return l.ambientStrength * l.color.rgb;
}

// point light
light pointLight(light l, vec3 surfacePos, vec3 position) {
//    light l;
    l.surfaceToLight = normalize(position.xyz - surfacePos);

    float distanceToLight = length(position.xyz - surfacePos);
    l.attenuation = 1.0 / (1.0 + l.diffuseStrength * pow(distanceToLight, 2.));

    return l;
}

vec3 sunPosition = vec3(500000., 1000000., 1000.);

// directional light
light directionalLight(light l, vec3 surfacePos, vec3 normal) {
//    light l;

    vec3 direction = l.position-surfacePos;

    l.surfaceToLight = normalize(direction.xyz);
    l.attenuation = 1.0; // no attenuation for directional lights

    l.coefficient = max(0.0, dot(normal, l.surfaceToLight));

    return l;
}

void main() {
    vec4 finalColor;
    if (useTexture == 1)
        finalColor = texture2D(tex0, vTexCoords) * tint;
    else if (useColor == 1)
        finalColor = vColor;
    else
        finalColor = fill;
            
    if (useLight > 0) {
        vec3 normal = normalize(transpose(inverse(mat3(matrixModel))) * vNormal);
        
        vec3 surfacePos = vPosition;
        vec4 surfaceColor = vColor;

        for (int i=0 ; i<nLights ; ++i) {
            if (lights[i].on == 1) {
                if (lights[i].type == 1) {
                    light l = directionalLight(lights[i], surfacePos, normal);
                    finalColor = vec4(vec3(finalColor * l.color) * l.coefficient, finalColor.a);
                    
                } if (lights[i].type == 2) {
                    vec3 v = ambientLight(lights[i]);
                    finalColor = vec4(vec3(finalColor) * v, finalColor.a);
                }
            }
        }
        gl_FragColor = finalColor;
    } else {
        gl_FragColor = finalColor;
    }
}
