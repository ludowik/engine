attribute vec3 vertex;

attribute vec3 inst_pos;
attribute vec3 inst_size;

uniform vec4 stroke;
uniform float strokeWidth;

uniform int lineCapMode;

uniform mat4 matrixModel;
uniform mat4 matrixPV;

const int SQUARE  = 0;
const int ROUND   = 1;
const int PROJECT = 2;
    
void main() {
    vec3 vertexPosition = vertex * inst_size + inst_pos;
    
    vec3 direction = normalize(inst_size);    
    vec3 perpendicular = vec3(-direction.y, direction.x, direction.z);
    
    vec3 normal = perpendicular * (strokeWidth + 1) / 2.;
    vec3 projection = direction * (strokeWidth + 1) / 2.;
    
    int id = gl_VertexID % 6;
    
    switch (id) {
        case 0: case 1: case 3:
            vertexPosition = vertexPosition - normal;
            break;
        case 2: case 4: case 5:
            vertexPosition = vertexPosition + normal;
            break;
    }
    
    if (lineCapMode == PROJECT) {    
        switch (id) {
            case 0: case 3: case 5:
                vertexPosition = vertexPosition - projection;
                break;
            case 1: case 2: case 4:
                vertexPosition = vertexPosition + projection;
                break;
        }
    }
    
    gl_Position = matrixPV * matrixModel * vec4(vertexPosition.xyz, 1.);
}
