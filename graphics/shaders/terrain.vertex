attribute vec3 vertex;
attribute vec3 normal;
attribute vec2 texCoords;
attribute vec4 color;

uniform mat4 matrixModel;
uniform mat4 matrixPV;

uniform vec4 fill;
uniform vec4 stroke;
uniform vec4 tint;

uniform vec3 pos;
uniform vec3 size;

uniform int useLight;
uniform int useColor;
uniform int useTexture;

out vec3 vPosition;
out vec3 vNormal;
out vec3 aNormal;
out vec4 vColor;
out vec2 vTexCoords;

out float elevation;

void main() {
    mat4 mm = matrixModel;

    float d = 0.5; // distance(vertex.xyz, vec3(0.0, 0.0, 0.0));
    elevation = d * 4
        + snoise(vertex.xyz*10.) * 0.5
        + snoise(vertex.xyz/2.0) * 0.25
        + snoise(vertex.xyz/4.0) * 0.125;

    vec4 position = vec4(vertex.xyz * elevation, 1.0);
    
    vec4 worldPosition = mm * vec4(position.xyz, 1.0);
    vec3 worldNormal = (mm * vec4(normal, 0.0)).xyz;
    
    vPosition = worldPosition.xyz;
    vNormal = worldNormal;
    
    vTexCoords = texCoords.xy;
    if (useColor > 0) {
        vColor = color;
    } else {
        vColor = stroke;
    }
    
    aNormal = mat3(transpose(inverse(matrixModel))) * vNormal; 
    
    gl_Position = matrixPV * matrixModel * position;
}
