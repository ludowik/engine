<<<<<<< HEAD
C:\Users\lmilhau\Documents\#Persos\Mes Projets Persos\Lua\engine
load applications/noise/map1
#version 410
#define VERSION 410
            #if VERSION >= 300
                #define gl_FragColor fragColor
                out vec4 fragColor;
                
                #define attribute in
                
                #define texture2D texture
            #else
                #define in  varying
                #define out varying
            #endif

            vec4 white = vec4(1.0, 1.0, 1.0, 1.0);
            vec4 black = vec4(0.0, 0.0, 0.0, 1.0);

            vec4 red   = vec4(1.0, 0.0, 0.0, 1.0);
            vec4 green = vec4(0.0, 1.0, 0.0, 1.0);
            vec4 blue  = vec4(0.0, 0.0, 1.0, 1.0);

            vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);
            
            #line 1
        attribute vec3 vertex;
attribute vec2 texCoords;
attribute vec4 color;
attribute vec3 normal;

uniform mat4 matrixModel;
uniform mat4 matrixPV;

uniform vec3 pos;
uniform vec3 size;

out vec3 vPosition;
out vec3 vNormal;
out vec4 vColor;
out vec2 vTexCoords;

void main() {
    vec3 vertexPosition = vertex * size + pos;    
    
    vec4 worldPosition = matrixModel * vec4(vertexPosition.xyz, 1.);
    vec4 worldNormal = matrixModel * vec4(normal, 0.0);
    
    gl_Position = matrixPV * worldPosition;
        
    vPosition = worldPosition.xyz;
    vNormal = worldNormal.xyz;
    
    vColor = color;
    vTexCoords = texCoords;
}

#version 410
#define VERSION 410
            #if VERSION >= 300
                #define gl_FragColor fragColor
                out vec4 fragColor;
                
                #define attribute in
                
                #define texture2D texture
            #else
                #define in  varying
                #define out varying
            #endif

            vec4 white = vec4(1.0, 1.0, 1.0, 1.0);
            vec4 black = vec4(0.0, 0.0, 0.0, 1.0);

            vec4 red   = vec4(1.0, 0.0, 0.0, 1.0);
            vec4 green = vec4(0.0, 1.0, 0.0, 1.0);
            vec4 blue  = vec4(0.0, 0.0, 1.0, 1.0);

            vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);
            
            #line 1
        uniform mat4 matrixModel;
uniform mat4 matrixPV;

uniform vec4 fill;
uniform vec4 stroke;
uniform vec4 tint;

uniform int useLight;
uniform int useColor;
uniform int useTexture;

uniform sampler2D tex0;

in vec3 vPosition;
in vec3 vNormal;
in vec4 vColor;
in vec2 vTexCoords;

vec3 cameraPosition = vec3(2., 2., 2.);

void main() {
    if (useLight > 0) {
        vec4 finalColor = vColor;
        
        vec3 normal = normalize(transpose(inverse(mat3(matrixModel))) * vNormal);
        
        vec3 surfacePos = vPosition;
        vec4 surfaceColor = vColor;
        vec3 surfaceToCamera = normalize(cameraPosition - surfacePos);
        
        gl_FragColor = finalColor * pow(max(0.0, dot(surfaceToCamera, normal)), 80);
        
        gl_FragColor = vec4(dot(surfaceToCamera, normal), 0, 0, 1);
        
    } else {    
        if (useColor == 1)
            gl_FragColor = vColor;
        else if (useTexture == 1) 
            gl_FragColor = texture2D(tex0, vTexCoords) * tint;
        else
            gl_FragColor = fill;
    }
}

#version 410
#define VERSION 410
            #if VERSION >= 300
                #define gl_FragColor fragColor
                out vec4 fragColor;
                
                #define attribute in
                
                #define texture2D texture
            #else
                #define in  varying
                #define out varying
            #endif

            vec4 white = vec4(1.0, 1.0, 1.0, 1.0);
            vec4 black = vec4(0.0, 0.0, 0.0, 1.0);

            vec4 red   = vec4(1.0, 0.0, 0.0, 1.0);
            vec4 green = vec4(0.0, 1.0, 0.0, 1.0);
            vec4 blue  = vec4(0.0, 0.0, 1.0, 1.0);

            vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);
            
            #line 1
        attribute vec3 vertex;
attribute vec2 texCoords;
attribute vec4 color;
attribute vec3 normal;

uniform mat4 matrixModel;
uniform mat4 matrixPV;

uniform vec3 pos;
uniform vec3 size;

out vec3 vPosition;
out vec3 vNormal;
out vec4 vColor;
out vec2 vTexCoords;

void main() {
    vec3 vertexPosition = vertex * size + pos;    
    
    vec4 worldPosition = matrixModel * vec4(vertexPosition.xyz, 1.);
    vec4 worldNormal = matrixModel * vec4(normal, 0.0);
    
    gl_Position = matrixPV * worldPosition;
        
    vPosition = worldPosition.xyz;
    vNormal = worldNormal.xyz;
    
    vColor = color;
    vTexCoords = texCoords;
}

#version 410
#define VERSION 410
            #if VERSION >= 300
                #define gl_FragColor fragColor
                out vec4 fragColor;
                
                #define attribute in
                
                #define texture2D texture
            #else
                #define in  varying
                #define out varying
            #endif

            vec4 white = vec4(1.0, 1.0, 1.0, 1.0);
            vec4 black = vec4(0.0, 0.0, 0.0, 1.0);

            vec4 red   = vec4(1.0, 0.0, 0.0, 1.0);
            vec4 green = vec4(0.0, 1.0, 0.0, 1.0);
            vec4 blue  = vec4(0.0, 0.0, 1.0, 1.0);

            vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);
            
            #line 1
        uniform mat4 matrixModel;
uniform mat4 matrixPV;

uniform vec4 fill;
uniform vec4 stroke;
uniform vec4 tint;

uniform int useLight;
uniform int useColor;
uniform int useTexture;

uniform sampler2D tex0;

in vec3 vPosition;
in vec3 vNormal;
in vec4 vColor;
in vec2 vTexCoords;

vec3 cameraPosition = vec3(2., 2., 2.);

void main() {
    if (useLight > 0) {
        vec4 finalColor = vColor;
        
        vec3 normal = normalize(transpose(inverse(mat3(matrixModel))) * vNormal);
        
        vec3 surfacePos = vPosition;
        vec4 surfaceColor = vColor;
        vec3 surfaceToCamera = normalize(cameraPosition - surfacePos);
        
        gl_FragColor = finalColor * pow(max(0.0, dot(surfaceToCamera, normal)), 80);
        
        gl_FragColor = vec4(dot(surfaceToCamera, normal), 0, 0, 1);
        
    } else {    
        if (useColor == 1)
            gl_FragColor = vColor;
        else if (useTexture == 1) 
            gl_FragColor = texture2D(tex0, vTexCoords) * tint;
        else
            gl_FragColor = fill;
    }
}

#version 410
#define VERSION 410
            #if VERSION >= 300
                #define gl_FragColor fragColor
                out vec4 fragColor;
                
                #define attribute in
                
                #define texture2D texture
            #else
                #define in  varying
                #define out varying
            #endif

            vec4 white = vec4(1.0, 1.0, 1.0, 1.0);
            vec4 black = vec4(0.0, 0.0, 0.0, 1.0);

            vec4 red   = vec4(1.0, 0.0, 0.0, 1.0);
            vec4 green = vec4(0.0, 1.0, 0.0, 1.0);
            vec4 blue  = vec4(0.0, 0.0, 1.0, 1.0);

            vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);
            
            #line 1
        attribute vec3 vertex;
attribute vec2 texCoords;
attribute vec4 color;
attribute vec3 normal;

uniform mat4 matrixModel;
uniform mat4 matrixPV;

uniform vec3 pos;
uniform vec3 size;

out vec3 vPosition;
out vec3 vNormal;
out vec4 vColor;
out vec2 vTexCoords;

void main() {
    vec3 vertexPosition = vertex * size + pos;    
    
    vec4 worldPosition = matrixModel * vec4(vertexPosition.xyz, 1.);
    vec4 worldNormal = matrixModel * vec4(normal, 0.0);
    
    gl_Position = matrixPV * worldPosition;
        
    vPosition = worldPosition.xyz;
    vNormal = worldNormal.xyz;
    
    vColor = color;
    vTexCoords = texCoords;
}

#version 410
#define VERSION 410
            #if VERSION >= 300
                #define gl_FragColor fragColor
                out vec4 fragColor;
                
                #define attribute in
                
                #define texture2D texture
            #else
                #define in  varying
                #define out varying
            #endif

            vec4 white = vec4(1.0, 1.0, 1.0, 1.0);
            vec4 black = vec4(0.0, 0.0, 0.0, 1.0);

            vec4 red   = vec4(1.0, 0.0, 0.0, 1.0);
            vec4 green = vec4(0.0, 1.0, 0.0, 1.0);
            vec4 blue  = vec4(0.0, 0.0, 1.0, 1.0);

            vec4 transparent = vec4(0.0, 0.0, 0.0, 0.0);
            
            #line 1
        uniform mat4 matrixModel;
uniform mat4 matrixPV;

uniform vec4 fill;
uniform vec4 stroke;
uniform vec4 tint;

uniform int useLight;
uniform int useColor;
uniform int useTexture;

uniform sampler2D tex0;

in vec3 vPosition;
in vec3 vNormal;
in vec4 vColor;
in vec2 vTexCoords;

vec3 cameraPosition = vec3(2., 2., 2.);

void main() {
    if (useLight > 0) {
        vec4 finalColor = vColor;
        
        vec3 normal = normalize(transpose(inverse(mat3(matrixModel))) * vNormal);
        
        vec3 surfacePos = vPosition;
        vec4 surfaceColor = vColor;
        vec3 surfaceToCamera = normalize(cameraPosition - surfacePos);
        
        gl_FragColor = finalColor * pow(max(0.0, dot(surfaceToCamera, normal)), 80);
        
        gl_FragColor = vec4(dot(surfaceToCamera, normal), 0, 0, 1);
        
    } else {    
        if (useColor == 1)
            gl_FragColor = vColor;
        else if (useTexture == 1) 
            gl_FragColor = texture2D(tex0, vTexCoords) * tint;
        else
            gl_FragColor = fill;
    }
}

=======
/Users/lca/Projets/Lua/engine
load applications/sketches3d/physics3d
release 2 fonts
memory at init    : 0.90 mo
memory min        : 0.90 mo
memory max        : 14.06 mo
memory variation  : 13.17 mo
memory at release : 11.51 mo
>>>>>>> a3f0ed522e6b37c257611ceb0845abfd1c65047a
